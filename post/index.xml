<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Gyuha Blog</title>
    <link>https://gyuha.github.io/post/</link>
    <description>Recent content in Posts on Gyuha Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Sun, 19 Apr 2020 03:50:46 +0900</lastBuildDate>
    
	<atom:link href="https://gyuha.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vscode에서 vue 프로젝트 생성시 ESlint와 Prettier 설정해 주기</title>
      <link>https://gyuha.github.io/post/2020-04-19-vue-typescript-eslint/</link>
      <pubDate>Sun, 19 Apr 2020 03:50:46 +0900</pubDate>
      
      <guid>https://gyuha.github.io/post/2020-04-19-vue-typescript-eslint/</guid>
      <description>Vue 프로젝트 생성하기 기존에 사용하던 TSLint가 더이상 지원을 받지 못 하게 되면서, ESlint로 넘어가야 상태가 되었습니다.
여기서는 Vue 프로젝트를 생성하면서 ESlint와 Prettier를 사용하는 세팅을 간단하게 설정하려고 합니다. 사용하는 툴은 vscode입니다.
vue create myproject 형태로 기본 프로젝트를 선택 합니다.
&amp;gt; npx vue create myproject ? Please pick a preset: Manually select features ? Check the features needed for your project: (*) Babel (*) TypeScript ( ) Progressive Web App (PWA) Support ( ) Router ( ) Vuex (*) CSS Pre-processors &amp;gt;(*) Linter / Formatter ( ) Unit Testing ( ) E2E Testing ?</description>
    </item>
    
    <item>
      <title>자바스크립트 배열 메서드 정리</title>
      <link>https://gyuha.github.io/post/2020-03-15-javascript-arrary/</link>
      <pubDate>Sun, 15 Mar 2020 21:39:55 +0900</pubDate>
      
      <guid>https://gyuha.github.io/post/2020-03-15-javascript-arrary/</guid>
      <description>Array 추가/삭제 Array.push() 배열의 마지막 요소를 추가해 줍니다.
let number_arr = [ 1, 2, 3, 4, 5 ]; number_arr.push(6); console.log(number_arr); // [ 1, 2, 3, 4, 5, 6 ]  Output :
 [1, 2, 3, 4, 5, 6]
 Array.unshift() 배열의 가장 첫번째 요소를 추가해 줍니다.
let number_arr = [ 1, 2, 3, 4, 5 ]; number_arr.unshift(6); console.log(number_arr); // [ 6, 1, 2, 3, 4, 5 ]  Output :</description>
    </item>
    
    <item>
      <title>윈도우용 패키지 매니저 Chocolatey 사용법</title>
      <link>https://gyuha.github.io/post/2020-01-10-chocolatey_manual/</link>
      <pubDate>Fri, 10 Jan 2020 03:03:39 +0900</pubDate>
      
      <guid>https://gyuha.github.io/post/2020-01-10-chocolatey_manual/</guid>
      <description>Chocolatey는 윈도우용 패키지 매니저로, 설치하려는 윈도우용 소프트웨어를 일일이 웹사이트에서 찾아서 설치할 필요 없이 간단하게 커맨드 만으로 윈도우용 소프트웨어를 설치 할 수 있게 해 줍니다.
Chocolatey 설치 chocolate를 설치 하려면 관리자 권한 cmd나 PowerShell을 실행해서 설치를 해 줘야 합니다.
cmd 사용시 @powershell -NoProfile -ExecutionPolicy Bypass -Command &amp;#34;iex ((new-object net.webclient).DownloadString(&amp;#39;https://chocolatey.org/install.ps1&amp;#39;))&amp;#34; &amp;amp;&amp;amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin powershell 사용시 Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(&amp;#39;https://chocolatey.org/install.ps1&amp;#39;)) 패키지 찾기 아래 웹페이지에 접속해서 검색하시면 됩니다.
 https://chocolatey.</description>
    </item>
    
    <item>
      <title>Typescript에서 default import 개선..</title>
      <link>https://gyuha.github.io/post/2019-12-19-typescript-default-import/</link>
      <pubDate>Thu, 19 Dec 2019 21:32:11 +0900</pubDate>
      
      <guid>https://gyuha.github.io/post/2019-12-19-typescript-default-import/</guid>
      <description>express를 import하면 아래와 같이 import 했을 겁니다.
import * as Express from &amp;#39;express&amp;#39;;  하지만 tsconfig.json 파일에 아래 내용을 추가 하면..
{ &amp;#34;compilerOptions&amp;#34;: { &amp;#34;allowSyntheticDefaultImports&amp;#34;: true, &amp;#34;esModuleInterop&amp;#34;: true, } } 이렇게 import가 가능해 집니다.
import Express from &amp;#39;express&amp;#39; </description>
    </item>
    
    <item>
      <title>VSCode에 live2d 사용하기</title>
      <link>https://gyuha.github.io/post/2019-01-22-vscode-live2d/</link>
      <pubDate>Tue, 22 Jan 2019 23:42:22 +0900</pubDate>
      
      <guid>https://gyuha.github.io/post/2019-01-22-vscode-live2d/</guid>
      <description>VSCode에서 Live2d 캐릭터 띄우기.. 먼저 띄운 화면을 보고 가시죠~
캐릭터 얼굴이 마우스 움직이는 방향으로 움직입니다.
너무 귀엽죠?
그러면, 설치를 해 볼까요?
먼저, 확장프로그램에서 live2d를 검색해서 설치해 줍니다.
그리고 재실행을 해주시면, 아무것도 안 나옵니다. -_-;
F1 또는 Ctrl+Shit+P을 누르고 live2d install을 해 줍니다. 그리고 다시 VSCode를 실행 해 줍니다.
그러면, 고양이가 왼쪽 하단에 나옵니다.
그리고, 나오는 경고&amp;hellip; 살포시 무시하기 위해서 고양이를 살짝 옮기시고, 기어 버튼을 누릅니다.
그리고 그만볼래(Don&#39;t Show Again)을 눌러 줍니다.</description>
    </item>
    
    <item>
      <title>우분투 18.04에서 kimchi 설치 하기</title>
      <link>https://gyuha.github.io/post/2019-01-04-ubuntu-1804-kimchi-install/</link>
      <pubDate>Fri, 04 Jan 2019 17:04:32 +0900</pubDate>
      
      <guid>https://gyuha.github.io/post/2019-01-04-ubuntu-1804-kimchi-install/</guid>
      <description>우분투 18.04에서 kimchi 설치 하기 Bridge Network 설치하기 전 kvm을 개발로 쓰면서 bridge network 형태로 자주 사용해서 먼저 bridge network를 설정 해 줍니다.
kimchi를 설치 이후에 설정으로 추가해 주면&amp;hellip; 문제가 발생하면서 네트워크가 불능이 되어 버립니다.
그래서 미리 설정을 해 줍니다.
먼저 bridge-utils를 설치 해 줍니다.
sudo apt install bridge-utils 그리고, /etc/netplan/50-cloud-init.yaml을 수정해 줍니다.
sudo vi /etc/netplan/50-cloud-init.yaml 아래와 같이 입력 합니다.
network:ethernets:enp3s0:dhcp4:falsebridges:br0:interfaces:-enp3s0dhcp4:falseaddresses:-192.168.1.200/24gateway4:192.168.1.200nameservers:addresses:-1.1.1.1-8.8.8.8parameters:forward-delay:0stp:falseoptional:trueversion:2 입력한 내용을 적용 합니다.
sudo netplan apply 이제 네트워크에 잘 적용이 되었는지 확인 합니다.</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04에서 netplan을 사용한 static ip 설정</title>
      <link>https://gyuha.github.io/post/2019-01-04-ubuntu-1804-static-ip/</link>
      <pubDate>Fri, 04 Jan 2019 10:30:30 +0900</pubDate>
      
      <guid>https://gyuha.github.io/post/2019-01-04-ubuntu-1804-static-ip/</guid>
      <description>Ubuntu 18.04에서 netplan을 사용한 static ip 설정 17.10부터 네트워크 인터페이스 설정이 netplan이라는 새로운 네트워크 설정이 생겼다. 기존에 인터페이스 설정(/etc/network/interfaces)보다는 간결해 보입니다.
변경 할 파일은 아래와 같습니다.
sudo vi /etc/netplan/50-cloud-init.yaml 기본적으로 dhcp로 설치 했을 경우 아래와 같이 나옵니다.
network:ethernets:enp4s0f2:addresses:[]dhcp4:trueversion:2 그 내용을 아래와 같이 ip와 정보를 넣고 설정 해 주면 됩니다.
network:ethernets:enp4s0f2:dhcp4:noaddresses:[192.168.1.200/24]gateway4:192.168.1.1nameservers:addresses:[1.1.1.1,8.8.8.8,8.8.4.4]version:2 그리고 변경 된 내용을 아래와 같이 적용 합니다.
sudo netplan apply 변경된 내용을 ifconfig로 확인 하면 됩니다.
$ ifconfig enp4s0f2: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500 inet 192.</description>
    </item>
    
    <item>
      <title>우분투 노트북 서버 사용시 커버를 덮어도 잠들지 않도록 하기</title>
      <link>https://gyuha.github.io/post/2019-01-04-ubuntu-server-labtop-cover/</link>
      <pubDate>Fri, 04 Jan 2019 10:23:04 +0900</pubDate>
      
      <guid>https://gyuha.github.io/post/2019-01-04-ubuntu-server-labtop-cover/</guid>
      <description>우분투 노트북 서버 사용시 커버를 덮어도 잠들지 않도록 하기 먼저 터미널에서 아래와 같은 파일을 열어 줍니다.
sudo vi /etc/systemd/logind.conf 파일에서 #HandleLidSwitch=suspend로 되어 있는 곳의 샵(#) 주석을 제거 하고 HandleLidSwitch=ignore 이렇게 변경해 줍니다.
# This file is part of systemd. # # systemd is free software; you can redistribute it and/or modify it # under the terms of the GNU Lesser General Public License as published by # the Free Software Foundation; either version 2.</description>
    </item>
    
    <item>
      <title>Windows 10 subsystem Ubuntu에서 ssh 설치 하기</title>
      <link>https://gyuha.github.io/post/2018-11-23-windows10-subsystem-openssh/</link>
      <pubDate>Fri, 23 Nov 2018 10:19:45 +0900</pubDate>
      
      <guid>https://gyuha.github.io/post/2018-11-23-windows10-subsystem-openssh/</guid>
      <description>먼저 기존에 설치된 openssh를 삭제하고 다시 설치해야 합니다.
그리고, sshd_config에서 port를 22번 말고 다른 포트로 변경해 줘야 합니다.
기본으로는 Port 22는 주석처리 되어 있습니다. 주석처리를 지우고 변경합니다.
이유는, 윈도우에서 이미 22번 포트를 사용하고 있기 때문입니다. 만약에 꼭 22번을 쓰고 윈도우에서 사용하는 22번 포트를 disable하고 써야 합니다.
정리하면 아래와 같습니다.
sudo apt-get remove --purge openssh-server sudo apt-get install openssh-server sudo vi /etc/ssh/sshd_config # Change Port from 22 to 222 sudo service ssh --full-restart</description>
    </item>
    
    <item>
      <title>Express Typescript Webpack</title>
      <link>https://gyuha.github.io/post/2018-11-13-express-typescript-webpack/</link>
      <pubDate>Tue, 13 Nov 2018 23:11:37 +0900</pubDate>
      
      <guid>https://gyuha.github.io/post/2018-11-13-express-typescript-webpack/</guid>
      <description>Express with typescript and webpack 기본 패키지 설정 package.json 파일을 만들어 줍니다.
npm init -y express에 필요한 패키지를 설치해 줍니다.
yarn add express body-parser Typescript 설정 typescript에 사용할 패키지를 설치 합니다.
yarn add --dev typescript ts-loader ts-node tslint @types/node @types/express typescript에 필요한 내용을 설치 합니다. 그리고 tsconfig.json파일을 아래와 같이 입력 해 줍니다.
{ &amp;#34;compilerOptions&amp;#34;: { &amp;#34;target&amp;#34;: &amp;#34;es6&amp;#34;, &amp;#34;module&amp;#34;: &amp;#34;commonjs&amp;#34;, &amp;#34;moduleResolution&amp;#34;: &amp;#34;node&amp;#34; }, &amp;#34;exclude&amp;#34;: [ &amp;#34;node_modules&amp;#34; ] } Webpack 설정 yarn add --dev webpack webpack-watch-server webpack.</description>
    </item>
    
    <item>
      <title>Hugo를 사용한 Github 블로그..</title>
      <link>https://gyuha.github.io/post/2018-11-07-hugo-github/</link>
      <pubDate>Wed, 07 Nov 2018 00:20:56 +0900</pubDate>
      
      <guid>https://gyuha.github.io/post/2018-11-07-hugo-github/</guid>
      <description>hugo 설치 하기  Install Hugo를 보고 하면 됩니다.  전 ubuntu를 쓰고 있는 관계로.. 간단하게..
sudo apt install hugo 이렇게 하면 간단하게 설치가 되네요..
사이트 만들기 $ hugo new site blog Congratulations! Your new Hugo site is created in /home/gyuha/workspace/temp/blog. Just a few more steps and you&amp;#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/, or create your own with the &amp;#34;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;#34; command.</description>
    </item>
    
    <item>
      <title>Typescript Webpack Serverless 구성하기</title>
      <link>https://gyuha.github.io/post/2018-11-06-typescript-webpack-serverless/</link>
      <pubDate>Tue, 06 Nov 2018 18:29:07 +0900</pubDate>
      
      <guid>https://gyuha.github.io/post/2018-11-06-typescript-webpack-serverless/</guid>
      <description>Serverless &amp;amp; Webpack &amp;amp; Typescript 구성하기 serverless에서 webpack을 이용해서 typescript를 구성해 보면서 작업 하던걸 기록 해 둡니다.
기본 환경 구성 기본적으로 node.js가 설치 되어 있어야 합니다.
serverless를 설치 합니다.
npm install -g serverless 그리고, 프로젝트를 생성해 줍니다.
$ serverless create -t aws-nodejs -p hello-lambda Serverless: Generating boilerplate... Serverless: Generating boilerplate in &amp;#34;/home/gyuha/workspace/hello-lambda&amp;#34; _______ __ | _ .-----.----.--.--.-----.----| .-----.-----.-----. | |___| -__| _| | | -__| _| | -__|__ --|__ --| |____ |_____|__| \___/|_____|__| |__|_____|_____|_____| | | | The Serverless Application Framework | | serverless.</description>
    </item>
    
  </channel>
</rss>