<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Typescript on Gyuha Blog</title>
    <link>https://gyuha.github.io/tags/typescript/</link>
    <description>Recent content in Typescript on Gyuha Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Sun, 19 Apr 2020 03:50:46 +0900</lastBuildDate>
    
	<atom:link href="https://gyuha.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vscode에서 vue 프로젝트 생성시 ESlint와 Prettier 설정해 주기</title>
      <link>https://gyuha.github.io/post/2020-04-19-vue-typescript-eslint/</link>
      <pubDate>Sun, 19 Apr 2020 03:50:46 +0900</pubDate>
      
      <guid>https://gyuha.github.io/post/2020-04-19-vue-typescript-eslint/</guid>
      <description>Vue 프로젝트 생성하기 기존에 사용하던 TSLint가 더이상 지원을 받지 못 하게 되면서, ESlint로 넘어가야 상태가 되었습니다.
여기서는 Vue 프로젝트를 생성하면서 ESlint와 Prettier를 사용하는 세팅을 간단하게 설정하려고 합니다. 사용하는 툴은 vscode입니다.
vue create myproject 형태로 기본 프로젝트를 선택 합니다.
&amp;gt; npx vue create myproject ? Please pick a preset: Manually select features ? Check the features needed for your project: (*) Babel (*) TypeScript ( ) Progressive Web App (PWA) Support ( ) Router ( ) Vuex (*) CSS Pre-processors &amp;gt;(*) Linter / Formatter ( ) Unit Testing ( ) E2E Testing ?</description>
    </item>
    
    <item>
      <title>Typescript에서 default import 개선..</title>
      <link>https://gyuha.github.io/post/2019-12-19-typescript-default-import/</link>
      <pubDate>Thu, 19 Dec 2019 21:32:11 +0900</pubDate>
      
      <guid>https://gyuha.github.io/post/2019-12-19-typescript-default-import/</guid>
      <description>express를 import하면 아래와 같이 import 했을 겁니다.
import * as Express from &amp;#39;express&amp;#39;;  하지만 tsconfig.json 파일에 아래 내용을 추가 하면..
{ &amp;#34;compilerOptions&amp;#34;: { &amp;#34;allowSyntheticDefaultImports&amp;#34;: true, &amp;#34;esModuleInterop&amp;#34;: true, } } 이렇게 import가 가능해 집니다.
import Express from &amp;#39;express&amp;#39; </description>
    </item>
    
    <item>
      <title>Express Typescript Webpack</title>
      <link>https://gyuha.github.io/post/2018-11-13-express-typescript-webpack/</link>
      <pubDate>Tue, 13 Nov 2018 23:11:37 +0900</pubDate>
      
      <guid>https://gyuha.github.io/post/2018-11-13-express-typescript-webpack/</guid>
      <description>Express with typescript and webpack 기본 패키지 설정 package.json 파일을 만들어 줍니다.
npm init -y express에 필요한 패키지를 설치해 줍니다.
yarn add express body-parser Typescript 설정 typescript에 사용할 패키지를 설치 합니다.
yarn add --dev typescript ts-loader ts-node tslint @types/node @types/express typescript에 필요한 내용을 설치 합니다. 그리고 tsconfig.json파일을 아래와 같이 입력 해 줍니다.
{ &amp;#34;compilerOptions&amp;#34;: { &amp;#34;target&amp;#34;: &amp;#34;es6&amp;#34;, &amp;#34;module&amp;#34;: &amp;#34;commonjs&amp;#34;, &amp;#34;moduleResolution&amp;#34;: &amp;#34;node&amp;#34; }, &amp;#34;exclude&amp;#34;: [ &amp;#34;node_modules&amp;#34; ] } Webpack 설정 yarn add --dev webpack webpack-watch-server webpack.</description>
    </item>
    
    <item>
      <title>Typescript Webpack Serverless 구성하기</title>
      <link>https://gyuha.github.io/post/2018-11-06-typescript-webpack-serverless/</link>
      <pubDate>Tue, 06 Nov 2018 18:29:07 +0900</pubDate>
      
      <guid>https://gyuha.github.io/post/2018-11-06-typescript-webpack-serverless/</guid>
      <description>Serverless &amp;amp; Webpack &amp;amp; Typescript 구성하기 serverless에서 webpack을 이용해서 typescript를 구성해 보면서 작업 하던걸 기록 해 둡니다.
기본 환경 구성 기본적으로 node.js가 설치 되어 있어야 합니다.
serverless를 설치 합니다.
npm install -g serverless 그리고, 프로젝트를 생성해 줍니다.
$ serverless create -t aws-nodejs -p hello-lambda Serverless: Generating boilerplate... Serverless: Generating boilerplate in &amp;#34;/home/gyuha/workspace/hello-lambda&amp;#34; _______ __ | _ .-----.----.--.--.-----.----| .-----.-----.-----. | |___| -__| _| | | -__| _| | -__|__ --|__ --| |____ |_____|__| \___/|_____|__| |__|_____|_____|_____| | | | The Serverless Application Framework | | serverless.</description>
    </item>
    
  </channel>
</rss>